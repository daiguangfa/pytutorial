Python深浅拷贝
=============

例子：

.. code:: python

    l = list('abc')
    a = l
    a.append('d')
    print(l)
    l.append('e')
    print(a)
    l = list('abcde')
    print(id(l))
    print(id(a))

    
可见，a = l即将a作为l的引用，类似于C语言中 & ；如果重新生成一个l，即使
内容一致，id也已经变化了，由于引用计数的原因，a这个变量名仍然能找到它
所指代的对象，不会迷失.

深浅拷贝
-----------

Python标准库中有个copy模块，用于对象之间的拷贝，其中常用的两个函数：
‘‘copy’’和deepcopy。

copy.copy()是浅拷贝，只拷贝了父对象，不会拷贝父对象中的子对象；
deepcopy是深拷贝，可以认为是完全的复制过去了。

.. code:: python

    l = ['a', 'b', 'c', [1, 2, 3]]
    import copy
    a = copy.copy(l)
    b = copy.deepcopy(l)
    a.append('e')
    b.append('f')
    print(a, b, l)
    a[3][2] = 'x'
    b[3][2] = 'y'
    print(a, b, l)

.. note::   可见，浅拷贝后，父对象中的子对象，即上例中列表中的列表，还是被共享着的.



append自己
----------

对于一个 list对象

.. code:: python

    l = ['a', 'b', 'c']

如果

.. code:: python

    l = l.append(l)    # append自己

会得出一个很有意思的结果：

.. code:: python

    >>l
    >>['a', 'b', 'c', [...]]

 
如果：

.. code:: python

    a = l[4]
    a == l
    a is l

 
结果都是True。对于上述的例子中的l，len(l) 是 5；如果

.. code:: python

    l = l.extend(l)
 
则不会出现这种效果

.. note:: append()与extend()的区别
